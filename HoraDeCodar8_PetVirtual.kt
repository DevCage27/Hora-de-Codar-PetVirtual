class VirtualPet(val nome: String) {
    var nivelDeFome = 50
    var nivelFelicidade = 60
    var nivelDeCansa√ßo = 30
    var idadePet = 1
    var sujeira = 0
    var vontadeBanheiro = 0

    // Fun√ß√µes para cuidar do pet

    fun alimentar() {
        vontadeBanheiro += 10
        nivelDeFome -= 20
        nivelFelicidade += 30
        if (nivelDeFome < 0) nivelDeFome = 0
        println("$nome foi alimentado. O n√≠vel de fome diminuiu.")
    }

    fun brincar() {
        sujeira += 20
        nivelFelicidade += 40
        println("$nome est√° brincando e se sentindo mais feliz.")
    }

    fun verificarStatus() {
        println("Status atual de $nome:")
        println("N√≠vel de fome üçΩÔ∏è: $nivelDeFome")
        println("N√≠vel de felicidade üíó: $nivelFelicidade")
        println("N√≠vel de cansa√ßo üò¥: $nivelDeCansa√ßo")
        println("N√≠vel do pet üéà: $idadePet")
    }

    fun passarTempo() {
        // Simula a passagem do tempo
        nivelDeFome += 10
        nivelFelicidade -= 30
        nivelDeCansa√ßo += 10
        println("fique atento com o passar do tempo!üï∞Ô∏è")

        // O pet s√≥ envelhece se estiver feliz
        if (nivelFelicidade >= 60) {
            idadePet++
            println("$nome cresceu! Agora est√° com $idadePet anos üéâ !")
        }

        // Checagem de morte
        if (nivelDeFome >= 100 || nivelDeCansa√ßo >= 100 || nivelFelicidade <= 0) {
            obito()
        }

        if (idadePet == 50) {
            println("Seu pet chegou aos 50 anos! Parab√©ns, voc√™ foi um(a) √≥timo(a) pai/m√£e de pet. üòé")
        }
    }

    fun descanso() {
        nivelDeCansa√ßo -= 15
        nivelFelicidade += 30
        if (nivelDeCansa√ßo < 0) nivelDeCansa√ßo = 0
        println("$nome tirou uma soneca, agora se sente mais disposto! üõèÔ∏è ")
    }

    fun obito() {
        println("$nome morreu por fome, cansa√ßo extremo ou tristeza profunda. Que feio.")
        kotlin.system.exitProcess(0)
    }
}


fun main() {
    println("Bem-vindo ao Simulador de Animal de Estima√ß√£o Virtual! üêæ")
    println("Digite o nome do seu animal de estima√ß√£o:")
    val nomePet = readLine() ?: "Baltazar Guilherme Ten√≥rio"
    val pet = VirtualPet(nomePet)

    while (true) {
        println("\\nEscolha uma a√ß√£o:")
        println("1. Alimentar $nomePet")
        println("2. Brincar com $nomePet")
        println("3. Verificar o status de $nomePet")
        println("4. Deixar $nomePet descansar")
        println("5. Sair")

        val escolha = readLine()?.toIntOrNull() ?: continue

        when (escolha) {
            1 -> pet.alimentar()
            2 -> pet.brincar()
            3 -> pet.verificarStatus()
            4 -> pet.descanso()
            5 -> {
                println("Saindo do Simulador de Animal de Estima√ß√£o Virtual. Adeus!")
                return
            }
            else -> println("Escolha inv√°lida. Tente novamente.")
        }

        pet.passarTempo()
    }
}
